package mapreduce

import (
	"strings"
	"strconv"
	"unicode"
)

// our simplified version of MapReduce does not supply a key to the 
// Map function, as in Google's MapReduce paper; only a value,
// which is a portion of the input file's content
func WCMap(value string) []KeyValue {
	f := func(c rune) bool {
		return !unicode.IsLetter(c)
	}
	re := strings.FieldsFunc(value, f)
	var mapres []KeyValue
	for _, word := range re {
		var tmp KeyValue
		tmp.Key = word
		tmp.Value = "1"
		mapres = append(mapres, tmp) 
	}
	
	return mapres
}

// called once for each key generated by Map, with a list of that 
// key's values. should return a single output value for that key.
func WCReduce(key string, values []string) string {
	var sum int
	sum = 0 
	for _, value := range values {
		int, _ := strconv.Atoi(value)
		sum += int
	}
	return strconv.Itoa(sum)
}
